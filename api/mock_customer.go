// Code generated by MockGen. DO NOT EDIT.
// Source: customer.pb.go

// Package customer is a generated GoMock package.
package customer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCustomerClient is a mock of CustomerClient interface
type MockCustomerClient struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerClientMockRecorder
}

// MockCustomerClientMockRecorder is the mock recorder for MockCustomerClient
type MockCustomerClientMockRecorder struct {
	mock *MockCustomerClient
}

// NewMockCustomerClient creates a new mock instance
func NewMockCustomerClient(ctrl *gomock.Controller) *MockCustomerClient {
	mock := &MockCustomerClient{ctrl: ctrl}
	mock.recorder = &MockCustomerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerClient) EXPECT() *MockCustomerClientMockRecorder {
	return m.recorder
}

// GetCustomer mocks base method
func (m *MockCustomerClient) GetCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomer", varargs...)
	ret0, _ := ret[0].(*CustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer
func (mr *MockCustomerClientMockRecorder) GetCustomer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockCustomerClient)(nil).GetCustomer), varargs...)
}

// MockCustomerServer is a mock of CustomerServer interface
type MockCustomerServer struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServerMockRecorder
}

// MockCustomerServerMockRecorder is the mock recorder for MockCustomerServer
type MockCustomerServerMockRecorder struct {
	mock *MockCustomerServer
}

// NewMockCustomerServer creates a new mock instance
func NewMockCustomerServer(ctrl *gomock.Controller) *MockCustomerServer {
	mock := &MockCustomerServer{ctrl: ctrl}
	mock.recorder = &MockCustomerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerServer) EXPECT() *MockCustomerServerMockRecorder {
	return m.recorder
}

// GetCustomer mocks base method
func (m *MockCustomerServer) GetCustomer(arg0 context.Context, arg1 *CustomerRequest) (*CustomerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", arg0, arg1)
	ret0, _ := ret[0].(*CustomerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer
func (mr *MockCustomerServerMockRecorder) GetCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockCustomerServer)(nil).GetCustomer), arg0, arg1)
}
